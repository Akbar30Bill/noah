#ifndef NOAH_H
#define NOAH_H

#include <stdint.h>

typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

static inline uint64_t rounddown(uint64_t x, uint64_t y) {
  return x / y * y;
}

static inline uint64_t roundup(uint64_t x, uint64_t y) {
  return (x + y - 1) / y * y;
}


/* hypervisor */

#include <Hypervisor/hv.h>
#include <Hypervisor/hv_vmx.h>
#include <Hypervisor/hv_arch_vmx.h>

#include "x86/page.h"

extern hv_vcpuid_t vcpuid;

void vmm_create(void);
void vmm_clone(void);
void vmm_destroy(void);

typedef uint64_t gaddr_t;

gaddr_t host_to_guest(void *);
void *guest_to_host(gaddr_t);

void *kalloc(size_t size);
void vm_map(uint64_t vmvaddr, uint64_t vmpaddr, size_t size, page_type_t page_type, int perm);


/* linux emulation */

void do_exec(const char *elf_path, int argc, char *argv[], char **envp);


/* debug */

#if DEBUG_MODE
#define PUTS(...) puts(__VA_ARGS__)
#define PRINTF(...) printf(__VA_ARGS__)
#else
#define PUTS(...) 0
#define PRINTF(...) 0
#endif

void print_regs(void);

#define NR_VMCS_FIELD (sizeof(vmcs_field_list) / sizeof(uint32_t) - 1)

static const uint32_t vmcs_field_list[] = {
  VMCS_VPID,
  VMCS_CTRL_POSTED_INT_N_VECTOR,
  VMCS_CTRL_EPTP_INDEX,
  VMCS_GUEST_ES,
  VMCS_GUEST_CS,
  VMCS_GUEST_SS,
  VMCS_GUEST_DS,
  VMCS_GUEST_FS,
  VMCS_GUEST_GS,
  VMCS_GUEST_LDTR,
  VMCS_GUEST_TR,
  VMCS_GUEST_INT_STATUS,
  VMCS_HOST_ES,
  VMCS_HOST_CS,
  VMCS_HOST_SS,
  VMCS_HOST_DS,
  VMCS_HOST_FS,
  VMCS_HOST_GS,
  VMCS_HOST_TR,
  VMCS_CTRL_IO_BITMAP_A,
  VMCS_CTRL_IO_BITMAP_B,
  VMCS_CTRL_MSR_BITMAPS,
  VMCS_CTRL_VMEXIT_MSR_STORE_ADDR,
  VMCS_CTRL_VMEXIT_MSR_LOAD_ADDR,
  VMCS_CTRL_VMENTRY_MSR_LOAD_ADDR,
  VMCS_CTRL_EXECUTIVE_VMCS_PTR,
  VMCS_CTRL_TSC_OFFSET,
  VMCS_CTRL_VIRTUAL_APIC,
  VMCS_CTRL_APIC_ACCESS,
  VMCS_CTRL_POSTED_INT_DESC_ADDR,
  VMCS_CTRL_VMFUNC_CTRL,
  VMCS_CTRL_EPTP,
  VMCS_CTRL_EOI_EXIT_BITMAP_0,
  VMCS_CTRL_EOI_EXIT_BITMAP_1,
  VMCS_CTRL_EOI_EXIT_BITMAP_2,
  VMCS_CTRL_EOI_EXIT_BITMAP_3,
  VMCS_CTRL_EPTP_LIST_ADDR,
  VMCS_CTRL_VMREAD_BITMAP_ADDR,
  VMCS_CTRL_VMWRITE_BITMAP_ADDR,
  VMCS_CTRL_VIRT_EXC_INFO_ADDR,
  VMCS_CTRL_XSS_EXITING_BITMAP,
  VMCS_GUEST_PHYSICAL_ADDRESS,
  VMCS_GUEST_LINK_POINTER,
  VMCS_GUEST_IA32_DEBUGCTL,
  VMCS_GUEST_IA32_PAT,
  VMCS_GUEST_IA32_EFER,
  VMCS_GUEST_IA32_PERF_GLOBAL_CTRL,
  VMCS_GUEST_PDPTE0,
  VMCS_GUEST_PDPTE1,
  VMCS_GUEST_PDPTE2,
  VMCS_GUEST_PDPTE3,
  VMCS_HOST_IA32_PAT,
  VMCS_HOST_IA32_EFER,
  VMCS_HOST_IA32_PERF_GLOBAL_CTRL,
  VMCS_CTRL_PIN_BASED,
  VMCS_CTRL_CPU_BASED,
  VMCS_CTRL_EXC_BITMAP,
  VMCS_CTRL_PF_ERROR_MASK,
  VMCS_CTRL_PF_ERROR_MATCH,
  VMCS_CTRL_CR3_COUNT,
  VMCS_CTRL_VMEXIT_CONTROLS,
  VMCS_CTRL_VMEXIT_MSR_STORE_COUNT,
  VMCS_CTRL_VMEXIT_MSR_LOAD_COUNT,
  VMCS_CTRL_VMENTRY_CONTROLS,
  VMCS_CTRL_VMENTRY_MSR_LOAD_COUNT,
  VMCS_CTRL_VMENTRY_IRQ_INFO,
  VMCS_CTRL_VMENTRY_EXC_ERROR,
  VMCS_CTRL_VMENTRY_INSTR_LEN,
  VMCS_CTRL_TPR_THRESHOLD,
  VMCS_CTRL_CPU_BASED2,
  VMCS_CTRL_PLE_GAP,
  VMCS_CTRL_PLE_WINDOW,
  VMCS_RO_INSTR_ERROR,
  VMCS_RO_EXIT_REASON,
  VMCS_RO_VMEXIT_IRQ_INFO,
  VMCS_RO_VMEXIT_IRQ_ERROR,
  VMCS_RO_IDT_VECTOR_INFO,
  VMCS_RO_IDT_VECTOR_ERROR,
  VMCS_RO_VMEXIT_INSTR_LEN,
  VMCS_RO_VMX_INSTR_INFO,
  VMCS_GUEST_ES_LIMIT,
  VMCS_GUEST_CS_LIMIT,
  VMCS_GUEST_SS_LIMIT,
  VMCS_GUEST_DS_LIMIT,
  VMCS_GUEST_FS_LIMIT,
  VMCS_GUEST_GS_LIMIT,
  VMCS_GUEST_LDTR_LIMIT,
  VMCS_GUEST_TR_LIMIT,
  VMCS_GUEST_GDTR_LIMIT,
  VMCS_GUEST_IDTR_LIMIT,
  VMCS_GUEST_ES_AR,
  VMCS_GUEST_CS_AR,
  VMCS_GUEST_SS_AR,
  VMCS_GUEST_DS_AR,
  VMCS_GUEST_FS_AR,
  VMCS_GUEST_GS_AR,
  VMCS_GUEST_LDTR_AR,
  VMCS_GUEST_TR_AR,
  VMCS_GUEST_IGNORE_IRQ,
  VMCS_GUEST_ACTIVITY_STATE,
  VMCS_GUEST_SMBASE,
  VMCS_GUEST_IA32_SYSENTER_CS,
  VMCS_GUEST_VMX_TIMER_VALUE,
  VMCS_HOST_IA32_SYSENTER_CS,
  VMCS_CTRL_CR0_MASK,
  VMCS_CTRL_CR4_MASK,
  VMCS_CTRL_CR0_SHADOW,
  VMCS_CTRL_CR4_SHADOW,
  VMCS_CTRL_CR3_VALUE0,
  VMCS_CTRL_CR3_VALUE1,
  VMCS_CTRL_CR3_VALUE2,
  VMCS_CTRL_CR3_VALUE3,
  VMCS_RO_EXIT_QUALIFIC,
  VMCS_RO_IO_RCX,
  VMCS_RO_IO_RSI,
  VMCS_RO_IO_RDI,
  VMCS_RO_IO_RIP,
  VMCS_RO_GUEST_LIN_ADDR,
  VMCS_GUEST_CR0,
  VMCS_GUEST_CR3,
  VMCS_GUEST_CR4,
  VMCS_GUEST_ES_BASE,
  VMCS_GUEST_CS_BASE,
  VMCS_GUEST_SS_BASE,
  VMCS_GUEST_DS_BASE,
  VMCS_GUEST_FS_BASE,
  VMCS_GUEST_GS_BASE,
  VMCS_GUEST_LDTR_BASE,
  VMCS_GUEST_TR_BASE,
  VMCS_GUEST_GDTR_BASE,
  VMCS_GUEST_IDTR_BASE,
  VMCS_GUEST_DR7,
  VMCS_GUEST_RSP,
  VMCS_GUEST_RIP,
  VMCS_GUEST_RFLAGS,
  VMCS_GUEST_DEBUG_EXC,
  VMCS_GUEST_SYSENTER_ESP,
  VMCS_GUEST_SYSENTER_EIP,
  VMCS_HOST_CR0,
  VMCS_HOST_CR3,
  VMCS_HOST_CR4,
  VMCS_HOST_FS_BASE,
  VMCS_HOST_GS_BASE,
  VMCS_HOST_TR_BASE,
  VMCS_HOST_GDTR_BASE,
  VMCS_HOST_IDTR_BASE,
  VMCS_HOST_IA32_SYSENTER_ESP,
  VMCS_HOST_IA32_SYSENTER_EIP,
  VMCS_HOST_RSP,
  VMCS_HOST_RIP,
  VMCS_MAX
};

static const char *vmcs_field_str[] = {
  "VMCS_VPID",
  "VMCS_CTRL_POSTED_INT_N_VECTOR",
  "VMCS_CTRL_EPTP_INDEX",
  "VMCS_GUEST_ES",
  "VMCS_GUEST_CS",
  "VMCS_GUEST_SS",
  "VMCS_GUEST_DS",
  "VMCS_GUEST_FS",
  "VMCS_GUEST_GS",
  "VMCS_GUEST_LDTR",
  "VMCS_GUEST_TR",
  "VMCS_GUEST_INT_STATUS",
  "VMCS_HOST_ES",
  "VMCS_HOST_CS",
  "VMCS_HOST_SS",
  "VMCS_HOST_DS",
  "VMCS_HOST_FS",
  "VMCS_HOST_GS",
  "VMCS_HOST_TR",
  "VMCS_CTRL_IO_BITMAP_A",
  "VMCS_CTRL_IO_BITMAP_B",
  "VMCS_CTRL_MSR_BITMAPS",
  "VMCS_CTRL_VMEXIT_MSR_STORE_ADDR",
  "VMCS_CTRL_VMEXIT_MSR_LOAD_ADDR",
  "VMCS_CTRL_VMENTRY_MSR_LOAD_ADDR",
  "VMCS_CTRL_EXECUTIVE_VMCS_PTR",
  "VMCS_CTRL_TSC_OFFSET",
  "VMCS_CTRL_VIRTUAL_APIC",
  "VMCS_CTRL_APIC_ACCESS",
  "VMCS_CTRL_POSTED_INT_DESC_ADDR",
  "VMCS_CTRL_VMFUNC_CTRL",
  "VMCS_CTRL_EPTP",
  "VMCS_CTRL_EOI_EXIT_BITMAP_0",
  "VMCS_CTRL_EOI_EXIT_BITMAP_1",
  "VMCS_CTRL_EOI_EXIT_BITMAP_2",
  "VMCS_CTRL_EOI_EXIT_BITMAP_3",
  "VMCS_CTRL_EPTP_LIST_ADDR",
  "VMCS_CTRL_VMREAD_BITMAP_ADDR",
  "VMCS_CTRL_VMWRITE_BITMAP_ADDR",
  "VMCS_CTRL_VIRT_EXC_INFO_ADDR",
  "VMCS_CTRL_XSS_EXITING_BITMAP",
  "VMCS_GUEST_PHYSICAL_ADDRESS",
  "VMCS_GUEST_LINK_POINTER",
  "VMCS_GUEST_IA32_DEBUGCTL",
  "VMCS_GUEST_IA32_PAT",
  "VMCS_GUEST_IA32_EFER",
  "VMCS_GUEST_IA32_PERF_GLOBAL_CTRL",
  "VMCS_GUEST_PDPTE0",
  "VMCS_GUEST_PDPTE1",
  "VMCS_GUEST_PDPTE2",
  "VMCS_GUEST_PDPTE3",
  "VMCS_HOST_IA32_PAT",
  "VMCS_HOST_IA32_EFER",
  "VMCS_HOST_IA32_PERF_GLOBAL_CTRL",
  "VMCS_CTRL_PIN_BASED",
  "VMCS_CTRL_CPU_BASED",
  "VMCS_CTRL_EXC_BITMAP",
  "VMCS_CTRL_PF_ERROR_MASK",
  "VMCS_CTRL_PF_ERROR_MATCH",
  "VMCS_CTRL_CR3_COUNT",
  "VMCS_CTRL_VMEXIT_CONTROLS",
  "VMCS_CTRL_VMEXIT_MSR_STORE_COUNT",
  "VMCS_CTRL_VMEXIT_MSR_LOAD_COUNT",
  "VMCS_CTRL_VMENTRY_CONTROLS",
  "VMCS_CTRL_VMENTRY_MSR_LOAD_COUNT",
  "VMCS_CTRL_VMENTRY_IRQ_INFO",
  "VMCS_CTRL_VMENTRY_EXC_ERROR",
  "VMCS_CTRL_VMENTRY_INSTR_LEN",
  "VMCS_CTRL_TPR_THRESHOLD",
  "VMCS_CTRL_CPU_BASED2",
  "VMCS_CTRL_PLE_GAP",
  "VMCS_CTRL_PLE_WINDOW",
  "VMCS_RO_INSTR_ERROR",
  "VMCS_RO_EXIT_REASON",
  "VMCS_RO_VMEXIT_IRQ_INFO",
  "VMCS_RO_VMEXIT_IRQ_ERROR",
  "VMCS_RO_IDT_VECTOR_INFO",
  "VMCS_RO_IDT_VECTOR_ERROR",
  "VMCS_RO_VMEXIT_INSTR_LEN",
  "VMCS_RO_VMX_INSTR_INFO",
  "VMCS_GUEST_ES_LIMIT",
  "VMCS_GUEST_CS_LIMIT",
  "VMCS_GUEST_SS_LIMIT",
  "VMCS_GUEST_DS_LIMIT",
  "VMCS_GUEST_FS_LIMIT",
  "VMCS_GUEST_GS_LIMIT",
  "VMCS_GUEST_LDTR_LIMIT",
  "VMCS_GUEST_TR_LIMIT",
  "VMCS_GUEST_GDTR_LIMIT",
  "VMCS_GUEST_IDTR_LIMIT",
  "VMCS_GUEST_ES_AR",
  "VMCS_GUEST_CS_AR",
  "VMCS_GUEST_SS_AR",
  "VMCS_GUEST_DS_AR",
  "VMCS_GUEST_FS_AR",
  "VMCS_GUEST_GS_AR",
  "VMCS_GUEST_LDTR_AR",
  "VMCS_GUEST_TR_AR",
  "VMCS_GUEST_IGNORE_IRQ",
  "VMCS_GUEST_ACTIVITY_STATE",
  "VMCS_GUEST_SMBASE",
  "VMCS_GUEST_IA32_SYSENTER_CS",
  "VMCS_GUEST_VMX_TIMER_VALUE",
  "VMCS_HOST_IA32_SYSENTER_CS",
  "VMCS_CTRL_CR0_MASK",
  "VMCS_CTRL_CR4_MASK",
  "VMCS_CTRL_CR0_SHADOW",
  "VMCS_CTRL_CR4_SHADOW",
  "VMCS_CTRL_CR3_VALUE0",
  "VMCS_CTRL_CR3_VALUE1",
  "VMCS_CTRL_CR3_VALUE2",
  "VMCS_CTRL_CR3_VALUE3",
  "VMCS_RO_EXIT_QUALIFIC",
  "VMCS_RO_IO_RCX",
  "VMCS_RO_IO_RSI",
  "VMCS_RO_IO_RDI",
  "VMCS_RO_IO_RIP",
  "VMCS_RO_GUEST_LIN_ADDR",
  "VMCS_GUEST_CR0",
  "VMCS_GUEST_CR3",
  "VMCS_GUEST_CR4",
  "VMCS_GUEST_ES_BASE",
  "VMCS_GUEST_CS_BASE",
  "VMCS_GUEST_SS_BASE",
  "VMCS_GUEST_DS_BASE",
  "VMCS_GUEST_FS_BASE",
  "VMCS_GUEST_GS_BASE",
  "VMCS_GUEST_LDTR_BASE",
  "VMCS_GUEST_TR_BASE",
  "VMCS_GUEST_GDTR_BASE",
  "VMCS_GUEST_IDTR_BASE",
  "VMCS_GUEST_DR7",
  "VMCS_GUEST_RSP",
  "VMCS_GUEST_RIP",
  "VMCS_GUEST_RFLAGS",
  "VMCS_GUEST_DEBUG_EXC",
  "VMCS_GUEST_SYSENTER_ESP",
  "VMCS_GUEST_SYSENTER_EIP",
  "VMCS_HOST_CR0",
  "VMCS_HOST_CR3",
  "VMCS_HOST_CR4",
  "VMCS_HOST_FS_BASE",
  "VMCS_HOST_GS_BASE",
  "VMCS_HOST_TR_BASE",
  "VMCS_HOST_GDTR_BASE",
  "VMCS_HOST_IDTR_BASE",
  "VMCS_HOST_IA32_SYSENTER_ESP",
  "VMCS_HOST_IA32_SYSENTER_EIP",
  "VMCS_HOST_RSP",
  "VMCS_HOST_RIP",
  "VMCS_MAX"
};

#define NR_X86_REG_LIST (sizeof(x86_reg_list) / sizeof(uint32_t) - 1)

static const uint32_t x86_reg_list[] = {
  HV_X86_RIP,
  HV_X86_RFLAGS,
  HV_X86_RAX,
  HV_X86_RCX,
  HV_X86_RDX,
  HV_X86_RBX,
  HV_X86_RSI,
  HV_X86_RDI,
  HV_X86_RSP,
  HV_X86_RBP,
  HV_X86_R8,
  HV_X86_R9,
  HV_X86_R10,
  HV_X86_R11,
  HV_X86_R12,
  HV_X86_R13,
  HV_X86_R14,
  HV_X86_R15,
  HV_X86_CS,
  HV_X86_SS,
  HV_X86_DS,
  HV_X86_ES,
  HV_X86_FS,
  HV_X86_GS,
  HV_X86_IDT_BASE,
  HV_X86_IDT_LIMIT,
  HV_X86_GDT_BASE,
  HV_X86_GDT_LIMIT,
  HV_X86_LDTR,
  HV_X86_LDT_BASE,
  HV_X86_LDT_LIMIT,
  HV_X86_LDT_AR,
  HV_X86_TR,
  HV_X86_TSS_BASE,
  HV_X86_TSS_LIMIT,
  HV_X86_TSS_AR,
  HV_X86_CR0,
  HV_X86_CR1,
  HV_X86_CR2,
  HV_X86_CR3,
  HV_X86_CR4,
  HV_X86_DR0,
  HV_X86_DR1,
  HV_X86_DR2,
  HV_X86_DR3,
  HV_X86_DR4,
  HV_X86_DR5,
  HV_X86_DR6,
  HV_X86_DR7,
  HV_X86_TPR,
  HV_X86_XCR0,
  HV_X86_REGISTERS_MAX
};

static const char *x86_reg_str[] = {
  "HV_X86_RIP",
  "HV_X86_RFLAGS",
  "HV_X86_RAX",
  "HV_X86_RCX",
  "HV_X86_RDX",
  "HV_X86_RBX",
  "HV_X86_RSI",
  "HV_X86_RDI",
  "HV_X86_RSP",
  "HV_X86_RBP",
  "HV_X86_R8",
  "HV_X86_R9",
  "HV_X86_R10",
  "HV_X86_R11",
  "HV_X86_R12",
  "HV_X86_R13",
  "HV_X86_R14",
  "HV_X86_R15",
  "HV_X86_CS",
  "HV_X86_SS",
  "HV_X86_DS",
  "HV_X86_ES",
  "HV_X86_FS",
  "HV_X86_GS",
  "HV_X86_IDT_BASE",
  "HV_X86_IDT_LIMIT",
  "HV_X86_GDT_BASE",
  "HV_X86_GDT_LIMIT",
  "HV_X86_LDTR",
  "HV_X86_LDT_BASE",
  "HV_X86_LDT_LIMIT",
  "HV_X86_LDT_AR",
  "HV_X86_TR",
  "HV_X86_TSS_BASE",
  "HV_X86_TSS_LIMIT",
  "HV_X86_TSS_AR",
  "HV_X86_CR0",
  "HV_X86_CR1",
  "HV_X86_CR2",
  "HV_X86_CR3",
  "HV_X86_CR4",
  "HV_X86_DR0",
  "HV_X86_DR1",
  "HV_X86_DR2",
  "HV_X86_DR3",
  "HV_X86_DR4",
  "HV_X86_DR5",
  "HV_X86_DR6",
  "HV_X86_DR7",
  "HV_X86_TPR",
  "HV_X86_XCR0",
  "HV_X86_REGISTERS_MAX"
};

struct vcpu;

void save_regs(struct vcpu *vcpu);
void dump_regs(struct vcpu *vcpu);
void save_vmcs(struct vcpu *vcpu);
extern struct vcpu vcpu;

#endif
